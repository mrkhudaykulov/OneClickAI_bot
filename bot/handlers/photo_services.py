from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Text

from ..keyboards import photo_services_menu, calories_post_actions, recipe_post_actions, ocr_post_actions, product_post_actions, main_menu
from ..monetization import ensure_user_and_gate
from ..states import PhotoServices
from ..utils import download_best_photo_bytes, to_data_url
from ..services.vision import analyze_calories, identify_recipe, identify_product
from ..services.ocr import ocr_image_to_text
from ..services.translate import translate_text
from ..services.files import text_to_pdf_bytes, text_to_docx_bytes

router = Router()


# Entry point to photo services
@router.message(F.text == "üì∑ –†–∞—Å–º –æ—Ä“õ–∞–ª–∏ —Ö–∏–∑–º–∞—Ç–ª–∞—Ä")
async def photo_menu(message: Message):
    if not await ensure_user_and_gate(message, consume=False):
        return
    await message.answer("–•–∏–∑–º–∞—Ç —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=photo_services_menu)


# Calories
@router.message(F.text == "üçî –ö–∞–ª–æ—Ä–∏—è –∞–Ω–∏“õ–ª–∞—à")
async def calories_entry(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="calories")
    await message.answer(
        "–ñ—É–¥–∞ —è—Ö—à–∏! –¢–∞–æ–º–Ω–∏–Ω–≥ –∫–∞–ª–æ—Ä–∏—è—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à —É—á—É–Ω —É–Ω–∏–Ω–≥ –∞–Ω–∏“õ –≤–∞ —Å–∏—Ñ–∞—Ç–ª–∏ —Ç—É—à–∏—Ä–∏–ª–≥–∞–Ω —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.\n"
        "–ò–ª—Ç–∏–º–æ—Å, –∏–ª–æ–∂–∏ –±–æ—Ä–∏—á–∞ –±–∏—Ç—Ç–∞ –ø–æ—Ä—Ü–∏—è —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.")


@router.message(PhotoServices.waiting_image, F.photo)
async def handle_waiting_image(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    data = await state.get_data()
    mode = data.get("mode")
    image_bytes = await download_best_photo_bytes(message.bot, message)
    data_url = to_data_url(image_bytes)

    if mode == "calories":
        await message.answer("‚è≥ –†–∞—Å–º “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞, –∏–ª—Ç–∏–º–æ—Å, –±–∏—Ä–æ–∑ –∫—É—Ç–∏–Ω–≥...")
        result = analyze_calories(data_url)
        # Enrich with CTA lines per spec
        extra = ("\n–ë—É–≥—É–Ω–≥–∏ –∫–∞–ª–æ—Ä–∏—è –º–µ—ä—ë—Ä–∏–Ω–≥–∏–∑–Ω–∏ –±–∏–ª–∏—à —É—á—É–Ω \"–§–∏—Ç–Ω–µ—Å-–∫–∞–º–µ—Ä–∞\" –±—û–ª–∏–º–∏–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥.\n"
                 "–ö–µ–π–∏–Ω–≥–∏ “≥–∞—Ä–∞–∫–∞—Ç–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:")
        await message.answer(result + "\n" + extra, reply_markup=calories_post_actions())
        return

    if mode == "recipe":
        await message.answer("‚è≥ –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞... –°–∏–∑ —É—á—É–Ω —ç–Ω–≥ —è—Ö—à–∏ —Ä–µ—Ü–µ–ø—Ç–Ω–∏ “õ–∏–¥–∏—Ä–º–æ“õ–¥–∞–º–∞–Ω.")
        result = identify_recipe(data_url)
        await message.answer(result, reply_markup=recipe_post_actions())
        return

    if mode == "ocr":
        text = ocr_image_to_text(data_url)
        await state.update_data(ocr_text=text)
        await message.answer(f"–ú–∞—Ç–Ω –∞–Ω–∏“õ–ª–∞–Ω–¥–∏:\n{text}\n\n–ù–∏–º–∞ “õ–∏–ª–∞–º–∏–∑?", reply_markup=ocr_post_actions())
        return

    if mode == "product":
        await message.answer("‚è≥ –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞... –û–±—ä–µ–∫—Ç–Ω–∏ –∞–Ω–∏“õ–ª–∞—è–ø–º–∞–Ω.")
        result = identify_product(data_url)
        await message.answer(result, reply_markup=product_post_actions())
        return


# Recipe
@router.message(F.text == "üçΩ –¢–∞–æ–º–Ω–∏ —Ç–∞–Ω–∏—à + —Ä–µ—Ü–µ–ø—Ç –±–µ—Ä–∏—à")
async def recipe_entry(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="recipe")
    await message.answer("–¢–∞–æ–º —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.")


# OCR
@router.message(F.text == "üßæ –ú–∞—Ç–Ω–Ω–∏ OCR –æ—Ä“õ–∞–ª–∏ —Ç–µ–∫—Å—Ç–≥–∞ –∞–π–ª–∞–Ω—Ç–∏—Ä–∏—à")
async def ocr_entry(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="ocr")
    await message.answer("–ú–∞—Ç–Ω–ª–∏ —Ä–∞—Å–º–Ω–∏ —é–±–æ—Ä–∏–Ω–≥. –ú–∞—Å–∞–ª–∞–Ω: “≥—É–∂–∂–∞—Ç, “õ–æ“ì–æ–∑, —ç–∫—Ä–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç–∏ –≤–∞ “≥.–∫.")


# Product
@router.message(F.text == "üõç –û–±—ä–µ–∫—Ç/—Ç–æ–≤–∞—Ä–Ω–∏ —Ç–∞–Ω–∏—à")
async def product_entry(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="product")
    await message.answer("–ò–ª—Ç–∏–º–æ—Å, –æ–±—ä–µ–∫—Ç —ë–∫–∏ —Ç–æ–≤–∞—Ä —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä—Ç–∏–Ω–≥.")


# Back buttons
@router.message(F.text == "üîô –û—Ä“õ–∞–≥–∞")
async def back_to_main(message: Message, state):
    await state.clear()
    await message.answer("–ê—Å–æ—Å–∏–π –º–µ–Ω—é–≥–∞ “õ–∞–π—Ç–¥–∏–Ω–≥–∏–∑.", reply_markup=main_menu)


# Inline callbacks for calories
@router.callback_query(Text("calories_again"))
async def calories_again(cb: CallbackQuery, state):
    await cb.answer()
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="calories")
    await cb.message.answer("–Ø–Ω–∞ —Ç–∞–æ–º —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.")


@router.callback_query(Text("calories_more"))
async def calories_more(cb: CallbackQuery, state):
    await cb.answer()
    data = await state.get_data()
    # For demo: reuse last result if needed. In real app, store structured data.
    await cb.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: “≥–æ–∑–∏—Ä—á–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∏–¥–∞.")


# Inline callbacks for recipe
@router.callback_query(Text("recipe_again"))
async def recipe_again(cb: CallbackQuery, state):
    await cb.answer()
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="recipe")
    await cb.message.answer("–ë–æ—à“õ–∞ —Ç–∞–æ–º —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.")


@router.callback_query(Text("recipe_check_calories"))
async def recipe_check_calories(cb: CallbackQuery, state):
    await cb.answer()
    await state.set_state(PhotoServices.waiting_image)
    await state.update_data(mode="calories")
    await cb.message.answer("–•—É–¥–¥–∏ —à—É —Ç–∞–æ–º —É—á—É–Ω –∫–∞–ª–æ—Ä–∏—è–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à. –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥.")


# Inline callbacks for OCR
@router.callback_query(Text("ocr_make_files"))
async def ocr_make_files(cb: CallbackQuery, state):
    await cb.answer()
    data = await state.get_data()
    text = data.get("ocr_text", "")
    if not text:
        await cb.message.answer("–ë–∏—Ä–æ—Ä –º–∞—Ç–Ω —Ç–æ–ø–∏–ª–º–∞–¥–∏. –ò–ª—Ç–∏–º–æ—Å, –∞–≤–≤–∞–ª —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥.")
        return
    pdf_bytes = text_to_pdf_bytes(text)
    docx_bytes = text_to_docx_bytes(text)
    await cb.message.answer_document(document=("ocr.pdf", pdf_bytes))
    await cb.message.answer_document(document=("ocr.docx", docx_bytes))


@router.callback_query(Text("ocr_translate"))
async def ocr_translate(cb: CallbackQuery, state):
    await cb.answer()
    await state.set_state(PhotoServices.waiting_translation_lang)
    await cb.message.answer("“ö–∞–π—Å–∏ —Ç–∏–ª–≥–∞ —Ç–∞—Ä–∂–∏–º–∞ “õ–∏–ª–∞–º–∏–∑? –ú–∞—Å–∞–ª–∞–Ω: EN, RU, UZ-LATIN")


@router.callback_query(Text("ocr_edit"))
async def ocr_edit(cb: CallbackQuery, state):
    await cb.answer()
    await cb.message.answer("–Ø–Ω–≥–∏ —Ç–∞“≥—Ä–∏—Ä–ª–∞–Ω–≥–∞–Ω –º–∞—Ç–Ω–Ω–∏ —é–±–æ—Ä–∏–Ω–≥.")
    await state.set_state(PhotoServices.waiting_ocr_edit)


@router.message(PhotoServices.waiting_ocr_edit)
async def ocr_edit_receive(message: Message, state):
    await state.update_data(ocr_text=message.text or "")
    await state.clear()
    await message.answer("–°–∞“õ–ª–∞–Ω–¥–∏. “ö–∞–Ω–¥–∞–π –¥–∞–≤–æ–º —ç—Ç–∞–º–∏–∑?", reply_markup=photo_services_menu)


@router.message(PhotoServices.waiting_translation_lang)
async def ocr_receive_lang(message: Message, state):
    lang = (message.text or "").strip()
    data = await state.get_data()
    text = data.get("ocr_text", "")
    if not text:
        await state.clear()
        await message.answer("–ê–≤–≤–∞–ª OCR –º–∞—Ç–Ω–∏ –π—û“õ. –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥.", reply_markup=photo_services_menu)
        return
    translated = translate_text(text, lang)
    await state.clear()
    await message.answer(translated, reply_markup=photo_services_menu)


# Back inline to menu
@router.callback_query(Text("back_photo_menu"))
async def back_photo_menu(cb: CallbackQuery, state):
    await cb.answer()
    await state.clear()
    await cb.message.answer("–•–∏–∑–º–∞—Ç —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=photo_services_menu)
