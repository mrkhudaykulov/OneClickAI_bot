from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram import F

from ..keyboards import fitness_menu, main_menu, pose_post_actions
from ..monetization import ensure_user_and_gate
from ..states import Fitness
from ..utils import download_best_photo_bytes, to_data_url
# from ..services.pose import overlay_pose
from ..services.vision import analyze_calories
from ..services.text_gpt import generate_workout_tips, generate_week_plan, diet_from_photo_or_text

router = Router()


@router.message(F.text == "üí™ –§–∏—Ç–Ω–µ—Å-–∫–∞–º–µ—Ä–∞")
async def fitness_entry(message: Message):
    if not await ensure_user_and_gate(message, consume=False):
        return
    await message.answer("–§–∏—Ç–Ω–µ—Å –±—û–ª–∏–º–∏:", reply_markup=fitness_menu)


@router.message(F.text == "üì∏ –¢–∞–Ω–∞–Ω–∏ –∞–Ω–∞–ª–∏–∑ “õ–∏–ª–∏—à (—Ä–∞—Å–º –æ—Ä“õ–∞–ª–∏)")
async def fitness_pose_request(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.set_state(Fitness.waiting_pose_image)
    await message.answer(
        "–ú—É“≥–∏–º —ç—Å–ª–∞—Ç–º–∞: –¢–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ —É–º—É–º–∏–π —Ç–∞“≥–ª–∏–ª “õ–∏–ª–∏—à —É—á—É–Ω, –∏–ª—Ç–∏–º–æ—Å, —Ç—û–ª–∏“õ –≥–∞–≤–¥–∞–Ω–≥–∏–∑ –∞–∫—Å —ç—Ç–≥–∞–Ω —Ä–∞—Å–º–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ (—Å–ø–æ—Ä—Ç –∫–∏–π–∏–º–∏–¥–∞ –±—û–ª–≥–∞–Ω–∏–Ω–≥–∏–∑ –º–∞—ä“õ—É–ª).\n"
        "–ú–∞—Ö—Ñ–∏–π–ª–∏–∫ –∫–∞—Ñ–æ–ª–∞—Ç–∏: –°–∏–∑ —é–±–æ—Ä–≥–∞–Ω —Ä–∞—Å–º —Ñ–∞“õ–∞—Ç –±–∏—Ä –º–∞—Ä—Ç–∞–ª–∏–∫ —Ç–∞“≥–ª–∏–ª —É—á—É–Ω –∏—à–ª–∞—Ç–∏–ª–∞–¥–∏ –≤–∞ —Ç–∏–∑–∏–º–¥–∞ —Å–∞“õ–ª–∞–Ω–º–∞–π–¥–∏. –ù–∞—Ç–∏–∂–∞–ª–∞—Ä —Ç–∏–±–±–∏–π —Ç–∞—à—Ö–∏—Å —ç–º–∞—Å.")


@router.message(Fitness.waiting_pose_image, F.photo)
async def fitness_pose_handle(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    image_bytes = await download_best_photo_bytes(message.bot, message)
    await message.answer("‚è≥ –†–∞—Å–º “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞, –∏–ª—Ç–∏–º–æ—Å, –±–∏—Ä–æ–∑ –∫—É—Ç–∏–Ω–≥...")
    out_bytes = overlay_pose(image_bytes)
    # ‚úÖ Shu yerda to‚Äòg‚Äòrilaymiz:
    photo_file = BufferedInputFile(out_bytes, filename="pose_result.jpg")
    analysis = (
        "–£–º—É–º–∏–π —Ç–∞“≥–ª–∏–ª –Ω–∞—Ç–∏–∂–∞–ª–∞—Ä–∏:\n"
        "“ö–æ–º–∞—Ç “≥–æ–ª–∞—Ç–∏: –ï–ª–∫–∞–ª–∞—Ä –±–∏—Ä–æ–∑ –æ–ª–¥–∏–Ω–≥–∞ –µ—Ç–∏–ª–∏—à–∏ –º—É–º–∫–∏–Ω.\n"
        "–¢–∞—Ö–º–∏–Ω–∏–π —Ç–∞–Ω–∞ —Ç—É—Ä–∏: “ö—û—à–∏–º—á–∞ –º–∞—à“õ –≤–∞ ovqatlanish bilan yaxshilanishi mumkin."
    )
    await message.answer_photo(photo=photo_file, caption=analysis, reply_markup=pose_post_actions())
    await state.clear()


@router.message(F.text == "üçõ –¢–∞–æ–º –∫–∞–ª–æ—Ä–∏—è—Å–∏ –≤–∞ –ø–∞—Ä“≥–µ–∑")
async def fitness_food(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await message.answer("–¢–∞–æ–º —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ —Ç–∞–æ–º–Ω–∏ –º–∞—Ç–Ω–¥–∞ —ë–∑–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: '–ø–∞–ª–æ–≤ 1 –ø–æ—Ä—Ü–∏—è').")
    await state.set_state(Fitness.waiting_diet_input)


@router.message(Fitness.waiting_diet_input, F.photo)
async def fitness_diet_photo(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    image_bytes = await download_best_photo_bytes(message.bot, message)
    await message.answer("‚è≥ –†–∞—Å–º “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–º–æ“õ–¥–∞...")
    hint = analyze_calories(to_data_url(image_bytes))
    diet = diet_from_photo_or_text(hint)
    await message.answer(f"{hint}\n\n–ü–∞—Ä“≥–µ–∑ –±—û–π–∏—á–∞ –º–∞—Å–ª–∞“≥–∞—Ç:\n{diet}")
    await state.clear()


@router.message(Fitness.waiting_diet_input, F.text)
async def fitness_diet_text(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    hint = message.text or ""
    diet = diet_from_photo_or_text(hint)
    await message.answer(f"–¢–∞“≥–ª–∏–ª: {hint}\n\n–ü–∞—Ä“≥–µ–∑ –±—û–π–∏—á–∞ –º–∞—Å–ª–∞“≥–∞—Ç:\n{diet}")
    await state.clear()


@router.message(F.text == "üìè BMI / –≤–∞–∑–Ω / “õ–∞–¥ “≥–∏—Å–æ–±–ª–∞—à")
async def fitness_bmi(message: Message, state):
    if not await ensure_user_and_gate(message, consume=False):
        return
    await message.answer("“ö–∞–¥-–Ω–∏ “õ–∞–Ω—á–∞? —Å–º –¥–∞ —ë–∑–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 175)")
    await state.set_state(Fitness.waiting_bmi_height)


@router.message(Fitness.waiting_bmi_height, F.text.regexp(r"^\d{2,3}$"))
async def fitness_bmi_height(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.update_data(height_cm=int(message.text))
    await message.answer("–í–∞–∑–Ω–∏–Ω–≥–∏–∑ “õ–∞–Ω—á–∞? –∫–≥ –¥–∞ —ë–∑–∏–Ω–≥ (–º–∞—Å–∞–ª–∞–Ω: 70)")
    await state.set_state(Fitness.waiting_bmi_weight)


@router.message(Fitness.waiting_bmi_weight, F.text.regexp(r"^\d{2,3}$"))
async def fitness_bmi_weight(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    data = await state.get_data()
    height_cm = data.get("height_cm")
    weight_kg = int(message.text)
    height_m = height_cm / 100.0
    bmi = round(weight_kg / (height_m ** 2), 1)

    category = (
        "–û—Ä—Ç–∏“õ—á–∞ –æ–∑“ì—É–Ω" if bmi < 18.5 else
        "–ù–æ—Ä–º–∞–ª" if bmi < 25 else
        "–û—Ä—Ç–∏“õ—á–∞ –≤–∞–∑–Ω" if bmi < 30 else
        "–°–µ–º–∏–∑–ª–∏–∫"
    )

    await message.answer(f"BMI: <b>{bmi}</b> ‚Äî {category}")
    await state.clear()


@router.message(F.text == "üèÉ –ú–∞—à“õ —Ç–∞–≤—Å–∏—è–ª–∞—Ä–∏")
async def fitness_workout(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await message.answer("–ú–∞“õ—Å–∞–¥–∏–Ω–≥–∏–∑? –ú–∞—Å–∞–ª–∞–Ω: –≤–∞–∑–Ω —Ç–∞—à–ª–∞—à, –º—É—à–∞–∫ —á–∏“õ–∞—Ä–∏—à, —á–∏–Ω–∏“õ–∏—à")
    await state.set_state(Fitness.waiting_workout_prefs)


@router.message(Fitness.waiting_workout_prefs)
async def fitness_workout_prefs(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await state.update_data(goal=message.text or "")
    await state.set_state(Fitness.waiting_workout_place)
    await message.answer("“ö–∞–µ—Ä–¥–∞ –º–∞—à“õ “õ–∏–ª–∞—Å–∏–∑? (—É–π–¥–∞/–∑–∞–ª)")


@router.message(Fitness.waiting_workout_place)
async def fitness_workout_place(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    data = await state.get_data()
    goal = data.get("goal", "")
    place = message.text or ""
    reply = generate_workout_tips(goal, place)
    await message.answer(reply)
    await state.clear()


@router.message(F.text == "üìÖ –§–∏—Ç–Ω–µ—Å-—Ä–µ–∂–∞ —Ç—É–∑–∏—à")
async def fitness_plan(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    await message.answer("“ö–∞–Ω—á–∞ –∫—É–Ω–ª–∏–∫ –≤–∞ “õ–∞–π—Å–∏ —É—Å–∫—É–Ω–∞–ª–∞—Ä –±–æ—Ä? –ú–∞—Å–∞–ª–∞–Ω: 4 –∫—É–Ω, –∑–∞–ª")
    await state.set_state(Fitness.waiting_plan_details)


@router.message(Fitness.waiting_plan_details)
async def fitness_plan_details(message: Message, state):
    if not await ensure_user_and_gate(message):
        return
    details = message.text or ""
    plan = generate_week_plan(details)
    await message.answer(f"–°–∏–∑–Ω–∏–Ω–≥ –∫–∏—Ä–∏—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑: {details}\n\n–¢–∞–∫–ª–∏—Ñ —ç—Ç–∏–ª–≥–∞–Ω —Ä–µ–∂–∞:\n{plan}")
    await state.clear()


@router.message(F.text == "üîô –û—Ä“õ–∞–≥–∞")
async def back_to_main(message: Message, state):
    await state.clear()
    await message.answer("–ê—Å–æ—Å–∏–π –º–µ–Ω—é:", reply_markup=main_menu)


@router.callback_query(F.data == "pose_again")
async def pose_again(cb: CallbackQuery, state):
    await cb.answer()
    await state.set_state(Fitness.waiting_pose_image)
    await cb.message.answer("–Ø–Ω–∞ —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥.")


@router.callback_query(F.data == "back_fitness_menu")
async def back_fitness_menu(cb: CallbackQuery, state):
    await cb.answer()
    await state.clear()
    await cb.message.answer("–§–∏—Ç–Ω–µ—Å –±—û–ª–∏–º–∏:", reply_markup=fitness_menu)
